#!/sbin/openrc-run
# Copyright 2020 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

description='setup cgroupv2 "background"'
command=''

depend() {
    need cgroups
}


cgroup2_remove() {
	einfo skipping cgroup2 remove
}

start() {
	CG_BG_DEFAULT_IOLAT=10000000
	CG_BG_EXTRA_DEFAULT_DEVICES="sda sdb sbc sdd"
	CG_BG_ENABLE_COST_QOS=0
    CG_BG_ENABLE_CONTROLLER_IO=0
    cgroup_path="$(cgroup2_find_path)"
	[ -n "${cgroup_path}" ] || return 1
	[ -d "${cgroup_path}" ] || mkdir "${cgroup_path}"
    rc_cgroup_path="${cgroup_path}/${RC_SVCNAME}"
	[ -d "${rc_cgroup_path}" ] || mkdir "${rc_cgroup_path}"

    # setup permissions
    chown :cg_bg "${cgroup_path}/cgroup.procs" "${rc_cgroup_path}/cgroup.procs"
    chmod go+rw  "${cgroup_path}/cgroup.procs" "${rc_cgroup_path}/cgroup.procs"
    cgroup2_set_limits
    
    # enable io,cpu,memory controller
    einfo enabling cpu cgroup subtree control
    echo +cpu > "${cgroup_path}/cgroup.subtree_control"
    if [[ "${CG_BG_ENABLE_CONTROLLER_IO}" -eq 1 ]];then
	    einfo enabling io cgroup subtree control
	    echo +io  > "${cgroup_path}/cgroup.subtree_control"
    fi
    einfo enabling memory cgroup subtree control
    echo +memory  > "${cgroup_path}/cgroup.subtree_control"
	if [[ "${CG_BG_ENABLE_COST_QOS}" -eq 1 ]];then
        io_cost_qos_strings="$(gen_cgroup_io_controller_setup_strings costq $CG_BG_EXTRA_DEFAULT_DEVICES)"
		einfo "io.cost.qos setup lines:"
		einfo "${io_cost_qos_strings}"
	
		IFS=$'\n'
		file="${cgroup_path}/io.cost.qos"
		for line in  $io_cost_qos_strings ; do
		    grepline=$(grep $(echo "${line}" | cut -d' ' -f1) "${file}")
		    if [[ $? -ne 0 ]] ;then
			    einfo "\"${line}\"" \> "${file}"
		        echo "${line}" > "${file}"
		    else
		        einfo "already active: \"${grepline}\""
		    fi
		done
	fi

	wf="${rc_cgroup_path}/cpu.weight"
	[[ -e "${wf}" ]] && echo 1 > "${wf}"

	if [[ "${CG_BG_ENABLE_COST_QOS}" -eq 1 ]];then
		wf="${rc_cgroup_path}/io.weight"
		[[ -e "${wf}" ]] && echo 75 > "${wf}"
	fi

	wf="${rc_cgroup_path}/io.prio.class"
	[[ -e "${wf}" ]] && echo idle > "${wf}"

    # calculate memory.high
    mem_high_bytes=$(cat /proc/meminfo|grep MemTotal|sed -E 's@^MemTotal[:][ ]*([1-9][0-9]*)[^0-9]*$@scale=0;\1 * 1024 / 3@'|busybox bc)
    mem_max_bytes=$(echo "scale=0; ${mem_high_bytes} * 2" | busybox bc)
    echo "${mem_high_bytes}" > "${rc_cgroup_path}/memory.high"
    echo "${mem_max_bytes}" > "${rc_cgroup_path}/memory.max"
    einfo "memory.high = $(cat "${rc_cgroup_path}/memory.high")"
    einfo "memory.max = $(cat "${rc_cgroup_path}/memory.max")"
}

stop(){
	einfo "stopping ${RC_SVCNAME}"
}
