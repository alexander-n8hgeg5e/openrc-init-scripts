#!/sbin/openrc-run
# Copyright 2020 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

description='setup cgroupv2 "background"'
command=''

depend() {
    need cgroups
}


cgroup2_remove() {
	einfo skipping cgroup2 remove
}

start() {
	CG_BG_DEFAULT_IOLAT=10000000
	CG_BG_EXTRA_DEFAULT_DEVICES="sda sdb sbc sdd"
    cgroup_path="$(cgroup2_find_path)"
	[ -n "${cgroup_path}" ] || return 1
	[ -d "${cgroup_path}" ] || mkdir "${cgroup_path}"
    rc_cgroup_path="${cgroup_path}/${RC_SVCNAME}"
	[ -d "${rc_cgroup_path}" ] || mkdir "${rc_cgroup_path}"

    # setup permissions
    chown :cg_bg "${cgroup_path}/cgroup.procs" "${rc_cgroup_path}/cgroup.procs"
    chmod go+rw  "${cgroup_path}/cgroup.procs" "${rc_cgroup_path}/cgroup.procs"
    cgroup2_set_limits
    
    # enable io,cpu controller
    einfo enabling cpu cgroup subtree control
    echo +cpu > "${cgroup_path}/cgroup.subtree_control"
    einfo enabling io cgroup subtree control
    echo +io  > "${cgroup_path}/cgroup.subtree_control"
 	io_cost_qos_strings="$(gen_cgroup_io_controller_setup_strings costq $CG_BG_EXTRA_DEFAULT_DEVICES)"
    einfo "io.cost.qos setup lines:"
    einfo "${io_cost_qos_strings}"

	IFS=$'\n'
    file="${cgroup_path}/io.cost.qos"
	for line in  $io_cost_qos_strings ; do
        grepline=$(grep $(echo "${line}" | cut -d' ' -f1) "${file}")
        if [[ $? -ne 0 ]] ;then
		    einfo "\"${line}\"" \> "${file}"
            echo "${line}" > "${file}"
        else
            einfo "already active: \"${grepline}\""
        fi
	done

	wf="${rc_cgroup_path}/cpu.weight"
	[[ -e "${wf}" ]] && echo 1 > "${wf}"

	wf="${rc_cgroup_path}/io.weight"
	[[ -e "${wf}" ]] && echo 1 > "${wf}"

	wf="${rc_cgroup_path}/io.prio.class"
	[[ -e "${wf}" ]] && echo idle > "${wf}"
}

stop(){
	einfo "stopping ${RC_SVCNAME}"
}
