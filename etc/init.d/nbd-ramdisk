#!/sbin/openrc-run
# Copyright (c) 2007-2015 The OpenRC Authors.
# See the Authors file at the top-level directory of this distribution and
# https://github.com/OpenRC/openrc/blob/master/AUTHORS
#
# This file is part of OpenRC. It is subject to the license terms in
# the LICENSE file found in the top-level directory of this
# distribution and at https://github.com/OpenRC/openrc/blob/master/LICENSE
# This file may not be copied, modified, propagated, or distributed
# except according to the terms contained in the LICENSE file.

name="nbd-ramdisk"
description="mounts tmpfs over nfs , creates a remote file and makes it available with \"nbd\""

devlink="/dev/${RC_SVCNAME}"
remote_run_dir="/run/dusteater"
imgfilename="export_$(hostname)_${RC_SVCNAME}.img"
imgfilepath="${remote_run_dir}/${imgfilename}"
max_allocate_space=10485760
min_allocate_space=12400
nbd_server_export_name="ramdisk-${RC_SVCNAME##*[-]}"
nbd_server_service_name="nbd-server_${nbd_server_export_name}"

depend()
{
    need dusteater net.dusteater iptables ip6tables
	after clock root
	keyword -docker -jail -lxc -openvz -prefix -systemd-nspawn -vserver
}

start()
{
	        ebegin "Activating ${RC_SVCNAME}"
		    mount "${remote_run_dir}"                                             ||  eend 1 || return 
            free_space_k="$(\
                                df -h -Bk --output=avail "${remote_run_dir}"|\
                                tail -n+2|\
                                head -n1|\
                                sed 's/[^0-9]//g'\
                              )"\
            || free_space_k="-1"
            if [[ ${free_space_k} -gt ${max_allocate_space} ]];then
                allocate_space_k="${max_allocate_space}"
            elif [[ ${free_space_k} -ge "${min_allocate_space}" ]];then
                allocate_space_k="${free_space_k}"
            else
                allocate_space_k="-1"
            fi
            if [[ $allocate_space_k -gt 0 ]];then
                einfo "space = $(( ${allocate_space_k}/1024 )) Mib"                            ||  eend 1 || return
		        fallocate --length "$(( ${allocate_space_k} * 1024 ))" "${imgfilepath}"        ||  eend 1 || return
                modprobe nbd                                                                   
                einfo "starting remote nbd server: \"${nbd_server_service_name}\""
                ssh root@de "rc-service ${nbd_server_service_name} start"                      ||  eend 1 || return
                start_nbd_client                                                               ||  eend 1 || return
            else
                eend 1 || return
            fi
            eend 0
}

stop()
{
	ebegin "Deactivating ${RC_SVCNAME}"
    if ! devpath=$(get_devpath);then
        ewarn "No active nbd device found."
    else
        if [[ -n "${devpath}" ]];then
            nbd_free_dev "${devpath}"                            || eend 1 || return
        fi
    fi
    ssh root@de "rc-service ${nbd_server_service_name} stop" || eend 1 || return
    rm -f "${imgfilepath}"                                   || eend 1 || return
	umount "${remote_run_dir}"
    status=$?
    if [[ $status -ne 0 ]];then
        if [[ $status -ne 32 ]];then
            eend 1 "umount failed" || return
        fi
    fi
    eend 0
}

get_devpath() {
    devicepath=$(readlink "${devlink}") || eend 1 || return
    echo ${devicepath}
}

start_nbd_client()
{
		outp=$(nbd-client -name "${nbd_server_export_name}" -swap -persist -connections 8 dusteater 8464 |grep -E '^Connected[ ]+[/]dev[/]nbd[0-9]+')
    	ret=$?
        devpath=$(echo "${outp}" | sed -E 's/^Connected[ ]+([/]dev[/]nbd[0-9]+).*$/\1/')
        einfo "dev=${devpath}"
    	if [[ $ret -eq 0 ]];then
            if [[ -n "${devpath}" ]];then
                rm "${devlink}"
                ln -s "${devpath}" "${devlink}" || eend 1 || return
            else
                eend 1 "could not get device path"
            fi
    	else
        	eend 1 "failed to start ${RC_SVCNAME}"
    	fi
}

nbd_free_dev()
{
    einfo "freeing nbd device \"${1}\""
    nbd-client -d "${1}"
    [[ $? -ne 2 ]] \
    && eend 0 "/dev/${1} free"
}
