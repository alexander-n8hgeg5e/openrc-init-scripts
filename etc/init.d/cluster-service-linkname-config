#!/sbin/openrc-run

name="${RC_SVCNAME}"

. /lib/rc/sh/rc-linkname-parsers.sh
parse_svcdata
providingnode="${svcdata[node]}"
servicename="${svcdata[name]}"

description="Virtual \"cluster service\" that adds a dependency to the service it is linked to.\n"
description+="The service will be started/stopped on all nodes synchronously."

depend() {
if [[ "$RC_SVCNAME" != cluster-service-linkname-config ]];then
    if [[ "$(cat /etc/hostname)" = "${providingnode}" ]];then
        need "${servicename}"
    else
        # determine the providing node/nodes
        word0="${providingnode%%-*}"
        if [[ "${word0}" == "nodes" ]] ;then
            einfo "nonimplemented case"
            # TODO: all nodes in "nodes-n0-n1-..."
        elif [[ "${word0}" == "any" ]] ;then
            einfo "nonimplemented case"
            # TODO: any node in "any-n0-n1-..."
        else

	        [[ -e /etc/passive_nodes ]] \
	        && passive_nodes=$(cat /etc/passiv_nodes) \
	        || passive_nodes=""
            self="$(hostname)"
	        i_pnode_checked=0

			if [[ $i_pnodeq_checked -eq 0 ]];then
                #einfo "$self: checking if i am passive .."
				i_pnode=0
				if [[ -e /etc/passive_nodes ]] ;then
					for pnode in $(cat /etc/passive_nodes); do
						[[ "${pnode}" = "${self}" ]] && i_pnode=1
					done
				fi
				i_pnode_checked=1
                #if [[ ${i_pnode} -eq 1 ]];then
                #    einfo "$self:                                 done , i am"
                #else
                #    einfo "$self:                                 done , i am not"
                #fi
			fi

            if [[ $i_pnode -eq 0 ]] && [[ "${self}" != "{providingnode}" ]] ;then
            	need "remote_${providingnode}_${servicename}"
			fi

        fi
    fi
    need cluster-com
fi
}

start() {
    self="$(hostname)"
    ebegin "$self: Starting cluster service \"cluster_${providingnode}_${servicename}\" on \"$(hostname)\""
    # to prevent recursion, mark service starting
    mark_service_starting
	[[ -e /etc/passive_nodes ]] \
	&& passive_nodes=$(cat /etc/passiv_nodes) \
	|| passive_nodes=""
	i_pnode_checked=0
    for node in $providingnode $(cat /etc/nodelist | grep -v "${providingnode}" ); do
		einfo "$self:  processing node $node .."
        if [[ "${self}"  != "${node}" ]];then

		    #einfo "$self:                 is remote node"
		    # -> I am not the node from nodelist
			# so inform remote node
			# first check,
			# if the service is allready starting at the remote don't call the node start it

			# check for i_pnode
			if [[ $i_pnodeq_checked -eq 0 ]];then
                #einfo "$self: checking if i am passive .."
				i_pnode=0
				if [[ -e /etc/passive_nodes ]] ;then
					for pnode in $(cat /etc/passive_nodes); do
						[[ "${pnode}" = "${self}" ]] && i_pnode=1
					done
				fi
				i_pnode_checked=1
                #if [[ ${i_pnode} -eq 1 ]];then
                #    einfo "$self:                                 done , i am"
                #else
                #    einfo "$self:                                 done , i am not"
                #fi
			fi

			if [[ $i_pnode -eq 0 ]] && [[ "${servicename}" != "${node}" ]];then
                #einfo "$self: so, calling remote node $node ..."
                einfo "$self: checking remote_${node}_cluster_${providingnode}_${servicename} ..."
            	rc-service "remote_${node}_cluster_${providingnode}_${servicename}" status 2>/dev/null 1>/dev/null
            	retcode=$?
                #einfo "$self:                                     status is \"$retcode\""
				# status 8 is starting
				# status 4 is stopping
            	if [[ $retcode -ne 8 ]];then
                    #einfo "$self:                                     status is not 8 so need to start"
            	    rc-service "remote_${node}_cluster_${providingnode}_${servicename}" start || eend 1 || return
                else
                    einfo "$self:                                                                           starting"
            	fi
			fi
        else
            #einfo "$self:                  is me"
            # i am the node
            # if i provide then start service
            # else do nothing as this service will be marked startped
            # after this script is done,
            # and this is the desired effect
            if [[ "${providingnode}" = "${node}" ]];then
                rc-service "${servicename}" start
            elif [[ "${providingnode%%-*}" = "nodes" ]]; then
                einfo "nonimplemented case"
                # TODO: implement for all nodes in like "nodes-n0-n1-..."
            fi
        fi
    done
    eend 0
}

stop() {
    self="$(hostname)"
    ebegin "$self: stopping cluster service \"cluster_${providingnode}_${servicename}\" on \"$(hostname)\""
    # to prevent recursion, mark service stopping
    mark_service_stopping
	[[ -e /etc/passive_nodes ]] \
	&& passive_nodes=$(cat /etc/passiv_nodes) \
	|| passive_nodes=""
	i_pnode_checked=0
    for node in $(cat /etc/nodelist | grep -v "${providingnode}" ) $providingnode; do
		einfo "$self:  processing node $node .."
        if [[ "${self}"  != "${node}" ]];then

		    #einfo "$self:                 is remote node"
		    # -> I am not the node from nodelist
			# so inform remote node
			# first check,
			# if the service is allready stopping at the remote don't call the node stop it

			# check for i_pnode
			if [[ $i_pnodeq_checked -eq 0 ]];then
                #einfo "$self: checking if i am passive .."
				i_pnode=0
				if [[ -e /etc/passive_nodes ]] ;then
					for pnode in $(cat /etc/passive_nodes); do
						[[ "${pnode}" = "${self}" ]] && i_pnode=1
					done
				fi
				i_pnode_checked=1
                #if [[ ${i_pnode} -eq 1 ]];then
                #    einfo "$self:                                 done , i am"
                #else
                #    einfo "$self:                                 done , i am not"
                #fi
			fi

			if [[ $i_pnode -eq 0 ]] ;then
                #einfo "$self: so, calling remote node $node ..."
                einfo "$self: checking remote_${node}_cluster_${providingnode}_${servicename} ..."
            	rc-service "remote_${node}_cluster_${providingnode}_${servicename}" status 2>/dev/null 1>/dev/null
            	retcode=$?
                #einfo "$self:                                     status is \"$retcode\""
				# status 8 is starting
				# status 4 is stopping
            	if [[ $retcode -ne 4 ]];then
                    #einfo "$self:                                     status is not 4 so need to stop"
            	    rc-service "remote_${node}_cluster_${providingnode}_${servicename}" stop || eend 1 || return
                else
                    einfo "$self:                                                                       stopping"
            	fi
			fi
        else
            #einfo "$self:                  is me"
            # i am the node
            # if i provide then stop service
            # else do nothing as this service will be marked stopped
            # after this script is done,
            # and this is the desired effect
            if [[ "${providingnode}" = "${node}" ]];then
                mark_service_stopped
                rc-service "${servicename}" stop
            elif [[ "${providingnode%%-*}" = "nodes" ]]; then
                einfo "nonimplemented case"
                # TODO: implement for all nodes in like "nodes-n0-n1-..."
            fi
        fi
    done
    eend 0
}




#status(){
#    if [[ "$(hostname)" = "${providingnode}" ]];then
#        rc-service "${servicename}" status
#        retcode=$?
#    else
#        rc-service "remote_${providingnode}_${servicename}" status
#        retcode=$?
#    fi
#    # 32:= crashed 16:=inactiv 8:=starting 4:=stopping 0:= started 3:= stopped
#    if [[ $retcode -eq 16 ]];then mark_service_inactive "${RC_SVCNAME}"; fi
#    if [[ $retcode -eq  8 ]];then mark_service_starting "${RC_SVCNAME}"; fi
#    if [[ $retcode -eq  4 ]];then mark_service_stopping "${RC_SVCNAME}"; fi
#    if [[ $retcode -eq  3 ]];then mark_service_stopped  "${RC_SVCNAME}"; fi
#    if [[ $retcode -eq  0 ]];then mark_service_started  "${RC_SVCNAME}"; fi
#    return $retcode
#}

